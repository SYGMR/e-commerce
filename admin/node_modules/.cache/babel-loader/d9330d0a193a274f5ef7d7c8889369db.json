{"ast":null,"code":"/*\n * Copyright (c) 2017-2018 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Guillaume\\\\Code\\\\e-commerce\\\\admin\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Guillaume\\\\Code\\\\e-commerce\\\\admin\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _require = require('./util'),\n    clone = _require.clone;\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Creates an active context cache.\n   *\n   * @param size the maximum size of the cache.\n   */\n  function ActiveContextCache() {\n    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n\n    _classCallCheck(this, ActiveContextCache);\n\n    this.order = [];\n    this.cache = new Map();\n    this.size = size;\n  }\n\n  _createClass(ActiveContextCache, [{\n    key: \"get\",\n    value: function get(activeCtx, localCtx) {\n      var level1 = this.cache.get(activeCtx);\n\n      if (level1) {\n        var key = JSON.stringify(localCtx);\n        var result = level1.get(key);\n        return result || null;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"set\",\n    value: function set(activeCtx, localCtx, result) {\n      if (this.order.length === this.size) {\n        var entry = this.order.shift();\n        this.cache.get(entry.activeCtx).delete(entry.localCtx);\n      }\n\n      var key = JSON.stringify(localCtx);\n      this.order.push({\n        activeCtx: activeCtx,\n        localCtx: key\n      });\n      var level1 = this.cache.get(activeCtx);\n\n      if (!level1) {\n        level1 = new Map();\n        this.cache.set(activeCtx, level1);\n      }\n\n      level1.set(key, clone(result));\n    }\n  }]);\n\n  return ActiveContextCache;\n}();","map":{"version":3,"sources":["C:/Users/Guillaume/Code/e-commerce/admin/node_modules/jsonld/lib/ActiveContextCache.js"],"names":["require","clone","module","exports","size","order","cache","Map","activeCtx","localCtx","level1","get","key","JSON","stringify","result","length","entry","shift","delete","push","set"],"mappings":"AAAA;;;AAGA;;;;;;eAEgBA,OAAO,CAAC,QAAD,C;IAAhBC,K,YAAAA,K;;AAEPC,MAAM,CAACC,OAAP;AAAA;AAAA;AACE;;;;;AAKA,gCAAwB;AAAA,QAAZC,IAAY,uEAAL,GAAK;;AAAA;;AACtB,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,KAAL,GAAa,IAAIC,GAAJ,EAAb;AACA,SAAKH,IAAL,GAAYA,IAAZ;AACD;;AAVH;AAAA;AAAA,wBAYMI,SAZN,EAYiBC,QAZjB,EAY2B;AACvB,UAAMC,MAAM,GAAG,KAAKJ,KAAL,CAAWK,GAAX,CAAeH,SAAf,CAAf;;AACA,UAAGE,MAAH,EAAW;AACT,YAAME,GAAG,GAAGC,IAAI,CAACC,SAAL,CAAeL,QAAf,CAAZ;AACA,YAAMM,MAAM,GAAGL,MAAM,CAACC,GAAP,CAAWC,GAAX,CAAf;AACA,eAAOG,MAAM,IAAI,IAAjB;AACD;;AACD,aAAO,IAAP;AACD;AApBH;AAAA;AAAA,wBAsBMP,SAtBN,EAsBiBC,QAtBjB,EAsB2BM,MAtB3B,EAsBmC;AAC/B,UAAG,KAAKV,KAAL,CAAWW,MAAX,KAAsB,KAAKZ,IAA9B,EAAoC;AAClC,YAAMa,KAAK,GAAG,KAAKZ,KAAL,CAAWa,KAAX,EAAd;AACA,aAAKZ,KAAL,CAAWK,GAAX,CAAeM,KAAK,CAACT,SAArB,EAAgCW,MAAhC,CAAuCF,KAAK,CAACR,QAA7C;AACD;;AACD,UAAMG,GAAG,GAAGC,IAAI,CAACC,SAAL,CAAeL,QAAf,CAAZ;AACA,WAAKJ,KAAL,CAAWe,IAAX,CAAgB;AAACZ,QAAAA,SAAS,EAATA,SAAD;AAAYC,QAAAA,QAAQ,EAAEG;AAAtB,OAAhB;AACA,UAAIF,MAAM,GAAG,KAAKJ,KAAL,CAAWK,GAAX,CAAeH,SAAf,CAAb;;AACA,UAAG,CAACE,MAAJ,EAAY;AACVA,QAAAA,MAAM,GAAG,IAAIH,GAAJ,EAAT;AACA,aAAKD,KAAL,CAAWe,GAAX,CAAeb,SAAf,EAA0BE,MAA1B;AACD;;AACDA,MAAAA,MAAM,CAACW,GAAP,CAAWT,GAAX,EAAgBX,KAAK,CAACc,MAAD,CAArB;AACD;AAnCH;;AAAA;AAAA","sourcesContent":["/*\n * Copyright (c) 2017-2018 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst {clone} = require('./util');\n\nmodule.exports = class ActiveContextCache {\n  /**\n   * Creates an active context cache.\n   *\n   * @param size the maximum size of the cache.\n   */\n  constructor(size = 100) {\n    this.order = [];\n    this.cache = new Map();\n    this.size = size;\n  }\n\n  get(activeCtx, localCtx) {\n    const level1 = this.cache.get(activeCtx);\n    if(level1) {\n      const key = JSON.stringify(localCtx);\n      const result = level1.get(key);\n      return result || null;\n    }\n    return null;\n  }\n\n  set(activeCtx, localCtx, result) {\n    if(this.order.length === this.size) {\n      const entry = this.order.shift();\n      this.cache.get(entry.activeCtx).delete(entry.localCtx);\n    }\n    const key = JSON.stringify(localCtx);\n    this.order.push({activeCtx, localCtx: key});\n    let level1 = this.cache.get(activeCtx);\n    if(!level1) {\n      level1 = new Map();\n      this.cache.set(activeCtx, level1);\n    }\n    level1.set(key, clone(result));\n  }\n};\n"]},"metadata":{},"sourceType":"script"}