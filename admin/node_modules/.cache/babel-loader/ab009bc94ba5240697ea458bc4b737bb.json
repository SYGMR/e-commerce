{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"C:\\\\Users\\\\Guillaume\\\\Code\\\\e-commerce\\\\admin\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Guillaume\\\\Code\\\\e-commerce\\\\admin\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Guillaume\\\\Code\\\\e-commerce\\\\admin\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.transformJsonLdDocumentToReactAdminDocument = void 0;\n\nvar _reactAdmin = require(\"react-admin\");\n\nvar _lodash = _interopRequireDefault(require(\"lodash.isplainobject\"));\n\nvar _fetchHydra = _interopRequireDefault(require(\"./fetchHydra\"));\n\nvar _parseHydraDocumentation = _interopRequireDefault(require(\"@api-platform/api-doc-parser/lib/hydra/parseHydraDocumentation\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar ReactAdminDocument =\n/*#__PURE__*/\nfunction () {\n  function ReactAdminDocument(obj) {\n    _classCallCheck(this, ReactAdminDocument);\n\n    Object.assign(this, obj, {\n      originId: obj.id,\n      id: obj['@id']\n    });\n  }\n  /**\n   * @return {string}\n   */\n\n\n  _createClass(ReactAdminDocument, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"[object \".concat(this.id, \"]\");\n    }\n  }]);\n\n  return ReactAdminDocument;\n}();\n/**\n * Local cache containing embedded documents.\n * It will be used to prevent useless extra HTTP query if the relation is displayed.\n *\n * @type {Map}\n */\n\n\nvar reactAdminDocumentsCache = new Map();\n/**\n * Transforms a JSON-LD document to a react-admin compatible document.\n *\n * @param {Object} document\n * @param {bool} clone\n *\n * @return {ReactAdminDocument}\n */\n\nvar transformJsonLdDocumentToReactAdminDocument = function transformJsonLdDocumentToReactAdminDocument(document) {\n  var clone = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var addToCache = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n  if (clone) {\n    // deep clone documents\n    document = JSON.parse(JSON.stringify(document));\n  } // The main document is a JSON-LD document, convert it and store it in the cache\n\n\n  if (document['@id']) {\n    document = new ReactAdminDocument(document);\n  } // Replace embedded objects by their IRIs, and store the object itself in the cache to reuse without issuing new HTTP requests.\n\n\n  Object.keys(document).forEach(function (key) {\n    // to-one\n    if ((0, _lodash.default)(document[key]) && document[key]['@id']) {\n      if (addToCache) {\n        reactAdminDocumentsCache[document[key]['@id']] = transformJsonLdDocumentToReactAdminDocument(document[key], false, false);\n      }\n\n      document[key] = document[key]['@id'];\n      return;\n    } // to-many\n\n\n    if (Array.isArray(document[key]) && document[key].length && (0, _lodash.default)(document[key][0]) && document[key][0]['@id']) {\n      document[key] = document[key].map(function (obj) {\n        if (addToCache) {\n          reactAdminDocumentsCache[obj['@id']] = transformJsonLdDocumentToReactAdminDocument(obj, false, false);\n        }\n\n        return obj['@id'];\n      });\n    }\n  });\n  return document;\n};\n/**\n * Maps react-admin queries to a Hydra powered REST API\n *\n * @see http://www.hydra-cg.com/\n *\n * @example\n * CREATE   => POST http://my.api.url/posts/123\n * DELETE   => DELETE http://my.api.url/posts/123\n * GET_LIST => GET http://my.api.url/posts\n * GET_MANY => GET http://my.api.url/posts/123, GET http://my.api.url/posts/456, GET http://my.api.url/posts/789\n * GET_ONE  => GET http://my.api.url/posts/123\n * UPDATE   => PUT http://my.api.url/posts/123\n */\n\n\nexports.transformJsonLdDocumentToReactAdminDocument = transformJsonLdDocumentToReactAdminDocument;\n\nvar _default = function _default(entrypoint) {\n  var httpClient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _fetchHydra.default;\n  var apiDocumentationParser = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _parseHydraDocumentation.default;\n  var apiSchema;\n  /**\n   * @param {Object} resource\n   * @param {Object} data\n   *\n   * @returns {Promise}\n   */\n\n  var convertReactAdminDataToHydraData = function convertReactAdminDataToHydraData(resource) {\n    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var fieldData = [];\n    resource.fields.forEach(function (_ref) {\n      var name = _ref.name,\n          reference = _ref.reference,\n          normalizeData = _ref.normalizeData;\n\n      if (!(name in data)) {\n        return;\n      }\n\n      if (reference && data[name] === '') {\n        data[name] = null;\n        return;\n      }\n\n      if (undefined === normalizeData) {\n        return;\n      }\n\n      fieldData[name] = normalizeData(data[name]);\n    });\n    var fieldDataKeys = Object.keys(fieldData);\n    var fieldDataValues = Object.values(fieldData);\n    return Promise.all(fieldDataValues).then(function (fieldData) {\n      var object = {};\n\n      for (var i = 0; i < fieldDataKeys.length; i++) {\n        object[fieldDataKeys[i]] = fieldData[i];\n      }\n\n      return _objectSpread({}, data, {}, object);\n    });\n  };\n  /**\n   * @param {Object} resource\n   * @param {Object} data\n   *\n   * @returns {Promise}\n   */\n\n\n  var transformReactAdminDataToRequestBody = function transformReactAdminDataToRequestBody(resource) {\n    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    resource = apiSchema.resources.find(function (_ref2) {\n      var name = _ref2.name;\n      return resource === name;\n    });\n\n    if (undefined === resource) {\n      return Promise.resolve(data);\n    }\n\n    return convertReactAdminDataToHydraData(resource, data).then(function (data) {\n      return JSON.stringify(data);\n    });\n  };\n  /**\n   * @param {string} type\n   * @param {string} resource\n   * @param {Object} params\n   *\n   * @returns {Object}\n   */\n\n\n  var convertReactAdminRequestToHydraRequest = function convertReactAdminRequestToHydraRequest(type, resource, params) {\n    var entrypointUrl = new URL(entrypoint, window.location.href);\n    var collectionUrl = new URL(\"\".concat(entrypoint, \"/\").concat(resource), entrypointUrl);\n    var itemUrl = new URL(params.id, entrypointUrl);\n\n    switch (type) {\n      case _reactAdmin.CREATE:\n        return transformReactAdminDataToRequestBody(resource, params.data).then(function (body) {\n          return {\n            options: {\n              body: body,\n              method: 'POST'\n            },\n            url: collectionUrl\n          };\n        });\n\n      case _reactAdmin.DELETE:\n        return Promise.resolve({\n          options: {\n            method: 'DELETE'\n          },\n          url: itemUrl\n        });\n\n      case _reactAdmin.GET_LIST:\n      case _reactAdmin.GET_MANY_REFERENCE:\n        {\n          var _params$pagination = params.pagination,\n              page = _params$pagination.page,\n              perPage = _params$pagination.perPage,\n              _params$sort = params.sort,\n              field = _params$sort.field,\n              order = _params$sort.order;\n          if (order) collectionUrl.searchParams.set(\"order[\".concat(field, \"]\"), order);\n          if (page) collectionUrl.searchParams.set('page', page);\n          if (perPage) collectionUrl.searchParams.set('perPage', perPage);\n\n          if (params.filter) {\n            var buildFilterParams = function buildFilterParams(key, nestedFilter, rootKey) {\n              var filterValue = nestedFilter[key];\n\n              if (Array.isArray(filterValue)) {\n                filterValue.forEach(function (arrayFilterValue, index) {\n                  collectionUrl.searchParams.set(\"\".concat(rootKey, \"[\").concat(index, \"]\"), arrayFilterValue);\n                });\n                return;\n              }\n\n              if (!(0, _lodash.default)(filterValue)) {\n                collectionUrl.searchParams.set(rootKey, filterValue);\n                return;\n              }\n\n              Object.keys(filterValue).forEach(function (subKey) {\n                buildFilterParams(subKey, filterValue, \"\".concat(rootKey, \".\").concat(subKey));\n              });\n            };\n\n            Object.keys(params.filter).forEach(function (key) {\n              buildFilterParams(key, params.filter, key);\n            });\n          }\n\n          if (type === _reactAdmin.GET_MANY_REFERENCE && params.target) {\n            collectionUrl.searchParams.set(params.target, params.id);\n          }\n\n          return Promise.resolve({\n            options: {},\n            url: collectionUrl\n          });\n        }\n\n      case _reactAdmin.GET_ONE:\n        return Promise.resolve({\n          options: {},\n          url: itemUrl\n        });\n\n      case _reactAdmin.UPDATE:\n        return transformReactAdminDataToRequestBody(resource, params.data).then(function (body) {\n          return {\n            options: {\n              body: body,\n              method: 'PUT'\n            },\n            url: itemUrl\n          };\n        });\n\n      default:\n        throw new Error(\"Unsupported fetch action type \".concat(type));\n    }\n  };\n  /**\n   * @param {string} resource\n   * @param {Object} data\n   *\n   * @returns {Promise}\n   */\n\n\n  var convertHydraDataToReactAdminData = function convertHydraDataToReactAdminData(resource) {\n    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    resource = apiSchema.resources.find(function (_ref3) {\n      var name = _ref3.name;\n      return resource === name;\n    });\n\n    if (undefined === resource) {\n      return Promise.resolve(data);\n    }\n\n    var fieldData = {};\n    resource.fields.forEach(function (_ref4) {\n      var name = _ref4.name,\n          denormalizeData = _ref4.denormalizeData;\n\n      if (!(name in data) || undefined === denormalizeData) {\n        return;\n      }\n\n      fieldData[name] = denormalizeData(data[name]);\n    });\n    var fieldDataKeys = Object.keys(fieldData);\n    var fieldDataValues = Object.values(fieldData);\n    return Promise.all(fieldDataValues).then(function (fieldData) {\n      var object = {};\n\n      for (var i = 0; i < fieldDataKeys.length; i++) {\n        object[fieldDataKeys[i]] = fieldData[i];\n      }\n\n      return _objectSpread({}, data, {}, object);\n    });\n  };\n  /**\n   * @param {Object} response\n   * @param {string} resource\n   * @param {string} type\n   *\n   * @returns {Promise}\n   */\n\n\n  var convertHydraResponseToReactAdminResponse = function convertHydraResponseToReactAdminResponse(type, resource, response) {\n    switch (type) {\n      case _reactAdmin.GET_LIST:\n      case _reactAdmin.GET_MANY_REFERENCE:\n        // TODO: support other prefixes than \"hydra:\"\n        return Promise.resolve(response.json['hydra:member'].map(transformJsonLdDocumentToReactAdminDocument)).then(function (data) {\n          return Promise.all(data.map(function (data) {\n            return convertHydraDataToReactAdminData(resource, data);\n          }));\n        }).then(function (data) {\n          return {\n            data: data,\n            total: response.json['hydra:totalItems']\n          };\n        });\n\n      case _reactAdmin.DELETE:\n        return Promise.resolve({\n          data: {\n            id: null\n          }\n        });\n\n      default:\n        return Promise.resolve(transformJsonLdDocumentToReactAdminDocument(response.json)).then(function (data) {\n          return convertHydraDataToReactAdminData(resource, data);\n        }).then(function (data) {\n          return {\n            data: data\n          };\n        });\n    }\n  };\n  /**\n   * @param {string} type\n   * @param {string} resource\n   * @param {Object} params\n   *\n   * @returns {Promise}\n   */\n\n\n  var fetchApi = function fetchApi(type, resource, params) {\n    // Hydra doesn't handle MANY requests, so we fallback to calling the ONE request n times instead\n    switch (type) {\n      case 'INTROSPECT':\n        if (apiSchema) return Promise.resolve({\n          data: apiSchema\n        });\n        return apiDocumentationParser(entrypoint).then(function (_ref5) {\n          var api = _ref5.api;\n          apiSchema = api;\n          return {\n            data: api\n          };\n        });\n\n      case _reactAdmin.GET_MANY:\n        return Promise.all(params.ids.map(function (id) {\n          return reactAdminDocumentsCache[id] ? Promise.resolve({\n            data: reactAdminDocumentsCache[id]\n          }) : fetchApi(_reactAdmin.GET_ONE, resource, {\n            id: id\n          });\n        })).then(function (responses) {\n          return {\n            data: responses.map(function (_ref6) {\n              var data = _ref6.data;\n              return data;\n            })\n          };\n        });\n\n      case _reactAdmin.DELETE_MANY:\n        return Promise.all(params.ids.map(function (id) {\n          return fetchApi(_reactAdmin.DELETE, resource, {\n            id: id\n          });\n        })).then(function (responses) {\n          return {\n            data: []\n          };\n        });\n\n      default:\n        return convertReactAdminRequestToHydraRequest(type, resource, params).then(function (_ref7) {\n          var url = _ref7.url,\n              options = _ref7.options;\n          return httpClient(url, options);\n        }).then(function (response) {\n          return convertHydraResponseToReactAdminResponse(type, resource, response);\n        });\n    }\n  };\n\n  return fetchApi;\n};\n\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/Guillaume/Code/e-commerce/admin/node_modules/@api-platform/admin/lib/hydra/dataProvider.js"],"names":["Object","defineProperty","exports","value","default","transformJsonLdDocumentToReactAdminDocument","_reactAdmin","require","_lodash","_interopRequireDefault","_fetchHydra","_parseHydraDocumentation","obj","__esModule","ReactAdminDocument","assign","originId","id","reactAdminDocumentsCache","Map","document","clone","addToCache","JSON","parse","stringify","keys","forEach","key","Array","isArray","length","map","_default","entrypoint","httpClient","apiDocumentationParser","apiSchema","convertReactAdminDataToHydraData","resource","data","fieldData","fields","name","reference","normalizeData","undefined","fieldDataKeys","fieldDataValues","values","Promise","all","then","object","i","transformReactAdminDataToRequestBody","resources","find","resolve","convertReactAdminRequestToHydraRequest","type","params","entrypointUrl","URL","window","location","href","collectionUrl","itemUrl","CREATE","body","options","method","url","DELETE","GET_LIST","GET_MANY_REFERENCE","pagination","page","perPage","sort","field","order","searchParams","set","filter","buildFilterParams","nestedFilter","rootKey","filterValue","arrayFilterValue","index","subKey","target","GET_ONE","UPDATE","Error","convertHydraDataToReactAdminData","denormalizeData","convertHydraResponseToReactAdminResponse","response","json","total","fetchApi","api","GET_MANY","ids","responses","DELETE_MANY"],"mappings":"AAAA;;;;;;;;;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBF,OAAO,CAACG,2CAAR,GAAsD,KAAK,CAA7E;;AAEA,IAAIC,WAAW,GAAGC,OAAO,CAAC,aAAD,CAAzB;;AAEA,IAAIC,OAAO,GAAGC,sBAAsB,CAACF,OAAO,CAAC,sBAAD,CAAR,CAApC;;AAEA,IAAIG,WAAW,GAAGD,sBAAsB,CAACF,OAAO,CAAC,cAAD,CAAR,CAAxC;;AAEA,IAAII,wBAAwB,GAAGF,sBAAsB,CAACF,OAAO,CAAC,gEAAD,CAAR,CAArD;;AAEA,SAASE,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAER,IAAAA,OAAO,EAAEQ;AAAX,GAArC;AAAwD;;IAEzFE,kB;;;AACJ,8BAAYF,GAAZ,EAAiB;AAAA;;AACfZ,IAAAA,MAAM,CAACe,MAAP,CAAc,IAAd,EAAoBH,GAApB,EAAyB;AACvBI,MAAAA,QAAQ,EAAEJ,GAAG,CAACK,EADS;AAEvBA,MAAAA,EAAE,EAAEL,GAAG,CAAC,KAAD;AAFgB,KAAzB;AAID;AACD;;;;;;;+BAKW;AACT,+BAAkB,KAAKK,EAAvB;AACD;;;;;AAGH;;;;;;;;AAQA,IAAMC,wBAAwB,GAAG,IAAIC,GAAJ,EAAjC;AACA;;;;;;;;;AASA,IAAMd,2CAA2C,GAAG,SAA9CA,2CAA8C,CAACe,QAAD,EAA+C;AAAA,MAApCC,KAAoC,uEAA5B,IAA4B;AAAA,MAAtBC,UAAsB,uEAAT,IAAS;;AACjG,MAAID,KAAJ,EAAW;AACT;AACAD,IAAAA,QAAQ,GAAGG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeL,QAAf,CAAX,CAAX;AACD,GAJgG,CAI/F;;;AAGF,MAAIA,QAAQ,CAAC,KAAD,CAAZ,EAAqB;AACnBA,IAAAA,QAAQ,GAAG,IAAIN,kBAAJ,CAAuBM,QAAvB,CAAX;AACD,GATgG,CAS/F;;;AAGFpB,EAAAA,MAAM,CAAC0B,IAAP,CAAYN,QAAZ,EAAsBO,OAAtB,CAA8B,UAAAC,GAAG,EAAI;AACnC;AACA,QAAI,CAAC,GAAGpB,OAAO,CAACJ,OAAZ,EAAqBgB,QAAQ,CAACQ,GAAD,CAA7B,KAAuCR,QAAQ,CAACQ,GAAD,CAAR,CAAc,KAAd,CAA3C,EAAiE;AAC/D,UAAIN,UAAJ,EAAgB;AACdJ,QAAAA,wBAAwB,CAACE,QAAQ,CAACQ,GAAD,CAAR,CAAc,KAAd,CAAD,CAAxB,GAAiDvB,2CAA2C,CAACe,QAAQ,CAACQ,GAAD,CAAT,EAAgB,KAAhB,EAAuB,KAAvB,CAA5F;AACD;;AAEDR,MAAAA,QAAQ,CAACQ,GAAD,CAAR,GAAgBR,QAAQ,CAACQ,GAAD,CAAR,CAAc,KAAd,CAAhB;AACA;AACD,KATkC,CASjC;;;AAGF,QAAIC,KAAK,CAACC,OAAN,CAAcV,QAAQ,CAACQ,GAAD,CAAtB,KAAgCR,QAAQ,CAACQ,GAAD,CAAR,CAAcG,MAA9C,IAAwD,CAAC,GAAGvB,OAAO,CAACJ,OAAZ,EAAqBgB,QAAQ,CAACQ,GAAD,CAAR,CAAc,CAAd,CAArB,CAAxD,IAAkGR,QAAQ,CAACQ,GAAD,CAAR,CAAc,CAAd,EAAiB,KAAjB,CAAtG,EAA+H;AAC7HR,MAAAA,QAAQ,CAACQ,GAAD,CAAR,GAAgBR,QAAQ,CAACQ,GAAD,CAAR,CAAcI,GAAd,CAAkB,UAAApB,GAAG,EAAI;AACvC,YAAIU,UAAJ,EAAgB;AACdJ,UAAAA,wBAAwB,CAACN,GAAG,CAAC,KAAD,CAAJ,CAAxB,GAAuCP,2CAA2C,CAACO,GAAD,EAAM,KAAN,EAAa,KAAb,CAAlF;AACD;;AAED,eAAOA,GAAG,CAAC,KAAD,CAAV;AACD,OANe,CAAhB;AAOD;AACF,GArBD;AAsBA,SAAOQ,QAAP;AACD,CAnCD;AAoCA;;;;;;;;;;;;;;;AAeAlB,OAAO,CAACG,2CAAR,GAAsDA,2CAAtD;;AAEA,IAAI4B,QAAQ,GAAG,SAAXA,QAAW,CAACC,UAAD,EAA6G;AAAA,MAAhGC,UAAgG,uEAAnFzB,WAAW,CAACN,OAAuE;AAAA,MAA9DgC,sBAA8D,uEAArCzB,wBAAwB,CAACP,OAAY;AAC1H,MAAIiC,SAAJ;AACA;;;;;;;AAOA,MAAMC,gCAAgC,GAAG,SAAnCA,gCAAmC,CAACC,QAAD,EAAyB;AAAA,QAAdC,IAAc,uEAAP,EAAO;AAChE,QAAMC,SAAS,GAAG,EAAlB;AACAF,IAAAA,QAAQ,CAACG,MAAT,CAAgBf,OAAhB,CAAwB,gBAIlB;AAAA,UAHJgB,IAGI,QAHJA,IAGI;AAAA,UAFJC,SAEI,QAFJA,SAEI;AAAA,UADJC,aACI,QADJA,aACI;;AACJ,UAAI,EAAEF,IAAI,IAAIH,IAAV,CAAJ,EAAqB;AACnB;AACD;;AAED,UAAII,SAAS,IAAIJ,IAAI,CAACG,IAAD,CAAJ,KAAe,EAAhC,EAAoC;AAClCH,QAAAA,IAAI,CAACG,IAAD,CAAJ,GAAa,IAAb;AACA;AACD;;AAED,UAAIG,SAAS,KAAKD,aAAlB,EAAiC;AAC/B;AACD;;AAEDJ,MAAAA,SAAS,CAACE,IAAD,CAAT,GAAkBE,aAAa,CAACL,IAAI,CAACG,IAAD,CAAL,CAA/B;AACD,KAnBD;AAoBA,QAAMI,aAAa,GAAG/C,MAAM,CAAC0B,IAAP,CAAYe,SAAZ,CAAtB;AACA,QAAMO,eAAe,GAAGhD,MAAM,CAACiD,MAAP,CAAcR,SAAd,CAAxB;AACA,WAAOS,OAAO,CAACC,GAAR,CAAYH,eAAZ,EAA6BI,IAA7B,CAAkC,UAAAX,SAAS,EAAI;AACpD,UAAMY,MAAM,GAAG,EAAf;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,aAAa,CAAChB,MAAlC,EAA0CuB,CAAC,EAA3C,EAA+C;AAC7CD,QAAAA,MAAM,CAACN,aAAa,CAACO,CAAD,CAAd,CAAN,GAA2Bb,SAAS,CAACa,CAAD,CAApC;AACD;;AAED,+BAAYd,IAAZ,MACKa,MADL;AAGD,KAVM,CAAP;AAWD,GAnCD;AAoCA;;;;;;;;AAQA,MAAME,oCAAoC,GAAG,SAAvCA,oCAAuC,CAAChB,QAAD,EAAyB;AAAA,QAAdC,IAAc,uEAAP,EAAO;AACpED,IAAAA,QAAQ,GAAGF,SAAS,CAACmB,SAAV,CAAoBC,IAApB,CAAyB;AAAA,UAClCd,IADkC,SAClCA,IADkC;AAAA,aAE9BJ,QAAQ,KAAKI,IAFiB;AAAA,KAAzB,CAAX;;AAIA,QAAIG,SAAS,KAAKP,QAAlB,EAA4B;AAC1B,aAAOW,OAAO,CAACQ,OAAR,CAAgBlB,IAAhB,CAAP;AACD;;AAED,WAAOF,gCAAgC,CAACC,QAAD,EAAWC,IAAX,CAAhC,CAAiDY,IAAjD,CAAsD,UAAAZ,IAAI;AAAA,aAAIjB,IAAI,CAACE,SAAL,CAAee,IAAf,CAAJ;AAAA,KAA1D,CAAP;AACD,GAVD;AAWA;;;;;;;;;AASA,MAAMmB,sCAAsC,GAAG,SAAzCA,sCAAyC,CAACC,IAAD,EAAOrB,QAAP,EAAiBsB,MAAjB,EAA4B;AACzE,QAAMC,aAAa,GAAG,IAAIC,GAAJ,CAAQ7B,UAAR,EAAoB8B,MAAM,CAACC,QAAP,CAAgBC,IAApC,CAAtB;AACA,QAAMC,aAAa,GAAG,IAAIJ,GAAJ,WAAW7B,UAAX,cAAyBK,QAAzB,GAAqCuB,aAArC,CAAtB;AACA,QAAMM,OAAO,GAAG,IAAIL,GAAJ,CAAQF,MAAM,CAAC5C,EAAf,EAAmB6C,aAAnB,CAAhB;;AAEA,YAAQF,IAAR;AACE,WAAKtD,WAAW,CAAC+D,MAAjB;AACE,eAAOd,oCAAoC,CAAChB,QAAD,EAAWsB,MAAM,CAACrB,IAAlB,CAApC,CAA4DY,IAA5D,CAAiE,UAAAkB,IAAI;AAAA,iBAAK;AAC/EC,YAAAA,OAAO,EAAE;AACPD,cAAAA,IAAI,EAAJA,IADO;AAEPE,cAAAA,MAAM,EAAE;AAFD,aADsE;AAK/EC,YAAAA,GAAG,EAAEN;AAL0E,WAAL;AAAA,SAArE,CAAP;;AAQF,WAAK7D,WAAW,CAACoE,MAAjB;AACE,eAAOxB,OAAO,CAACQ,OAAR,CAAgB;AACrBa,UAAAA,OAAO,EAAE;AACPC,YAAAA,MAAM,EAAE;AADD,WADY;AAIrBC,UAAAA,GAAG,EAAEL;AAJgB,SAAhB,CAAP;;AAOF,WAAK9D,WAAW,CAACqE,QAAjB;AACA,WAAKrE,WAAW,CAACsE,kBAAjB;AACE;AAAA,mCAUMf,MAVN,CAEIgB,UAFJ;AAAA,cAGMC,IAHN,sBAGMA,IAHN;AAAA,cAIMC,OAJN,sBAIMA,OAJN;AAAA,6BAUMlB,MAVN,CAMImB,IANJ;AAAA,cAOMC,KAPN,gBAOMA,KAPN;AAAA,cAQMC,KARN,gBAQMA,KARN;AAWE,cAAIA,KAAJ,EAAWf,aAAa,CAACgB,YAAd,CAA2BC,GAA3B,iBAAwCH,KAAxC,QAAkDC,KAAlD;AACX,cAAIJ,IAAJ,EAAUX,aAAa,CAACgB,YAAd,CAA2BC,GAA3B,CAA+B,MAA/B,EAAuCN,IAAvC;AACV,cAAIC,OAAJ,EAAaZ,aAAa,CAACgB,YAAd,CAA2BC,GAA3B,CAA+B,SAA/B,EAA0CL,OAA1C;;AAEb,cAAIlB,MAAM,CAACwB,MAAX,EAAmB;AACjB,gBAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAC1D,GAAD,EAAM2D,YAAN,EAAoBC,OAApB,EAAgC;AACxD,kBAAMC,WAAW,GAAGF,YAAY,CAAC3D,GAAD,CAAhC;;AAEA,kBAAIC,KAAK,CAACC,OAAN,CAAc2D,WAAd,CAAJ,EAAgC;AAC9BA,gBAAAA,WAAW,CAAC9D,OAAZ,CAAoB,UAAC+D,gBAAD,EAAmBC,KAAnB,EAA6B;AAC/CxB,kBAAAA,aAAa,CAACgB,YAAd,CAA2BC,GAA3B,WAAkCI,OAAlC,cAA6CG,KAA7C,QAAuDD,gBAAvD;AACD,iBAFD;AAGA;AACD;;AAED,kBAAI,CAAC,CAAC,GAAGlF,OAAO,CAACJ,OAAZ,EAAqBqF,WAArB,CAAL,EAAwC;AACtCtB,gBAAAA,aAAa,CAACgB,YAAd,CAA2BC,GAA3B,CAA+BI,OAA/B,EAAwCC,WAAxC;AACA;AACD;;AAEDzF,cAAAA,MAAM,CAAC0B,IAAP,CAAY+D,WAAZ,EAAyB9D,OAAzB,CAAiC,UAAAiE,MAAM,EAAI;AACzCN,gBAAAA,iBAAiB,CAACM,MAAD,EAASH,WAAT,YAAyBD,OAAzB,cAAoCI,MAApC,EAAjB;AACD,eAFD;AAGD,aAlBD;;AAoBA5F,YAAAA,MAAM,CAAC0B,IAAP,CAAYmC,MAAM,CAACwB,MAAnB,EAA2B1D,OAA3B,CAAmC,UAAAC,GAAG,EAAI;AACxC0D,cAAAA,iBAAiB,CAAC1D,GAAD,EAAMiC,MAAM,CAACwB,MAAb,EAAqBzD,GAArB,CAAjB;AACD,aAFD;AAGD;;AAED,cAAIgC,IAAI,KAAKtD,WAAW,CAACsE,kBAArB,IAA2Cf,MAAM,CAACgC,MAAtD,EAA8D;AAC5D1B,YAAAA,aAAa,CAACgB,YAAd,CAA2BC,GAA3B,CAA+BvB,MAAM,CAACgC,MAAtC,EAA8ChC,MAAM,CAAC5C,EAArD;AACD;;AAED,iBAAOiC,OAAO,CAACQ,OAAR,CAAgB;AACrBa,YAAAA,OAAO,EAAE,EADY;AAErBE,YAAAA,GAAG,EAAEN;AAFgB,WAAhB,CAAP;AAID;;AAEH,WAAK7D,WAAW,CAACwF,OAAjB;AACE,eAAO5C,OAAO,CAACQ,OAAR,CAAgB;AACrBa,UAAAA,OAAO,EAAE,EADY;AAErBE,UAAAA,GAAG,EAAEL;AAFgB,SAAhB,CAAP;;AAKF,WAAK9D,WAAW,CAACyF,MAAjB;AACE,eAAOxC,oCAAoC,CAAChB,QAAD,EAAWsB,MAAM,CAACrB,IAAlB,CAApC,CAA4DY,IAA5D,CAAiE,UAAAkB,IAAI;AAAA,iBAAK;AAC/EC,YAAAA,OAAO,EAAE;AACPD,cAAAA,IAAI,EAAJA,IADO;AAEPE,cAAAA,MAAM,EAAE;AAFD,aADsE;AAK/EC,YAAAA,GAAG,EAAEL;AAL0E,WAAL;AAAA,SAArE,CAAP;;AAQF;AACE,cAAM,IAAI4B,KAAJ,yCAA2CpC,IAA3C,EAAN;AAvFJ;AAyFD,GA9FD;AA+FA;;;;;;;;AAQA,MAAMqC,gCAAgC,GAAG,SAAnCA,gCAAmC,CAAC1D,QAAD,EAAyB;AAAA,QAAdC,IAAc,uEAAP,EAAO;AAChED,IAAAA,QAAQ,GAAGF,SAAS,CAACmB,SAAV,CAAoBC,IAApB,CAAyB;AAAA,UAClCd,IADkC,SAClCA,IADkC;AAAA,aAE9BJ,QAAQ,KAAKI,IAFiB;AAAA,KAAzB,CAAX;;AAIA,QAAIG,SAAS,KAAKP,QAAlB,EAA4B;AAC1B,aAAOW,OAAO,CAACQ,OAAR,CAAgBlB,IAAhB,CAAP;AACD;;AAED,QAAMC,SAAS,GAAG,EAAlB;AACAF,IAAAA,QAAQ,CAACG,MAAT,CAAgBf,OAAhB,CAAwB,iBAGlB;AAAA,UAFJgB,IAEI,SAFJA,IAEI;AAAA,UADJuD,eACI,SADJA,eACI;;AACJ,UAAI,EAAEvD,IAAI,IAAIH,IAAV,KAAmBM,SAAS,KAAKoD,eAArC,EAAsD;AACpD;AACD;;AAEDzD,MAAAA,SAAS,CAACE,IAAD,CAAT,GAAkBuD,eAAe,CAAC1D,IAAI,CAACG,IAAD,CAAL,CAAjC;AACD,KATD;AAUA,QAAMI,aAAa,GAAG/C,MAAM,CAAC0B,IAAP,CAAYe,SAAZ,CAAtB;AACA,QAAMO,eAAe,GAAGhD,MAAM,CAACiD,MAAP,CAAcR,SAAd,CAAxB;AACA,WAAOS,OAAO,CAACC,GAAR,CAAYH,eAAZ,EAA6BI,IAA7B,CAAkC,UAAAX,SAAS,EAAI;AACpD,UAAMY,MAAM,GAAG,EAAf;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,aAAa,CAAChB,MAAlC,EAA0CuB,CAAC,EAA3C,EAA+C;AAC7CD,QAAAA,MAAM,CAACN,aAAa,CAACO,CAAD,CAAd,CAAN,GAA2Bb,SAAS,CAACa,CAAD,CAApC;AACD;;AAED,+BAAYd,IAAZ,MACKa,MADL;AAGD,KAVM,CAAP;AAWD,GAjCD;AAkCA;;;;;;;;;AASA,MAAM8C,wCAAwC,GAAG,SAA3CA,wCAA2C,CAACvC,IAAD,EAAOrB,QAAP,EAAiB6D,QAAjB,EAA8B;AAC7E,YAAQxC,IAAR;AACE,WAAKtD,WAAW,CAACqE,QAAjB;AACA,WAAKrE,WAAW,CAACsE,kBAAjB;AACE;AACA,eAAO1B,OAAO,CAACQ,OAAR,CAAgB0C,QAAQ,CAACC,IAAT,CAAc,cAAd,EAA8BrE,GAA9B,CAAkC3B,2CAAlC,CAAhB,EAAgG+C,IAAhG,CAAqG,UAAAZ,IAAI;AAAA,iBAAIU,OAAO,CAACC,GAAR,CAAYX,IAAI,CAACR,GAAL,CAAS,UAAAQ,IAAI;AAAA,mBAAIyD,gCAAgC,CAAC1D,QAAD,EAAWC,IAAX,CAApC;AAAA,WAAb,CAAZ,CAAJ;AAAA,SAAzG,EAA8LY,IAA9L,CAAmM,UAAAZ,IAAI;AAAA,iBAAK;AACjNA,YAAAA,IAAI,EAAJA,IADiN;AAEjN8D,YAAAA,KAAK,EAAEF,QAAQ,CAACC,IAAT,CAAc,kBAAd;AAF0M,WAAL;AAAA,SAAvM,CAAP;;AAKF,WAAK/F,WAAW,CAACoE,MAAjB;AACE,eAAOxB,OAAO,CAACQ,OAAR,CAAgB;AACrBlB,UAAAA,IAAI,EAAE;AACJvB,YAAAA,EAAE,EAAE;AADA;AADe,SAAhB,CAAP;;AAMF;AACE,eAAOiC,OAAO,CAACQ,OAAR,CAAgBrD,2CAA2C,CAAC+F,QAAQ,CAACC,IAAV,CAA3D,EAA4EjD,IAA5E,CAAiF,UAAAZ,IAAI;AAAA,iBAAIyD,gCAAgC,CAAC1D,QAAD,EAAWC,IAAX,CAApC;AAAA,SAArF,EAA2IY,IAA3I,CAAgJ,UAAAZ,IAAI;AAAA,iBAAK;AAC9JA,YAAAA,IAAI,EAAJA;AAD8J,WAAL;AAAA,SAApJ,CAAP;AAjBJ;AAqBD,GAtBD;AAuBA;;;;;;;;;AASA,MAAM+D,QAAQ,GAAG,SAAXA,QAAW,CAAC3C,IAAD,EAAOrB,QAAP,EAAiBsB,MAAjB,EAA4B;AAC3C;AACA,YAAQD,IAAR;AACE,WAAK,YAAL;AACE,YAAIvB,SAAJ,EAAe,OAAOa,OAAO,CAACQ,OAAR,CAAgB;AACpClB,UAAAA,IAAI,EAAEH;AAD8B,SAAhB,CAAP;AAGf,eAAOD,sBAAsB,CAACF,UAAD,CAAtB,CAAmCkB,IAAnC,CAAwC,iBAEzC;AAAA,cADJoD,GACI,SADJA,GACI;AACJnE,UAAAA,SAAS,GAAGmE,GAAZ;AACA,iBAAO;AACLhE,YAAAA,IAAI,EAAEgE;AADD,WAAP;AAGD,SAPM,CAAP;;AASF,WAAKlG,WAAW,CAACmG,QAAjB;AACE,eAAOvD,OAAO,CAACC,GAAR,CAAYU,MAAM,CAAC6C,GAAP,CAAW1E,GAAX,CAAe,UAAAf,EAAE;AAAA,iBAAIC,wBAAwB,CAACD,EAAD,CAAxB,GAA+BiC,OAAO,CAACQ,OAAR,CAAgB;AACrFlB,YAAAA,IAAI,EAAEtB,wBAAwB,CAACD,EAAD;AADuD,WAAhB,CAA/B,GAEnCsF,QAAQ,CAACjG,WAAW,CAACwF,OAAb,EAAsBvD,QAAtB,EAAgC;AAC3CtB,YAAAA,EAAE,EAAFA;AAD2C,WAAhC,CAFuB;AAAA,SAAjB,CAAZ,EAIFmC,IAJE,CAIG,UAAAuD,SAAS;AAAA,iBAAK;AACtBnE,YAAAA,IAAI,EAAEmE,SAAS,CAAC3E,GAAV,CAAc;AAAA,kBAClBQ,IADkB,SAClBA,IADkB;AAAA,qBAEdA,IAFc;AAAA,aAAd;AADgB,WAAL;AAAA,SAJZ,CAAP;;AAUF,WAAKlC,WAAW,CAACsG,WAAjB;AACE,eAAO1D,OAAO,CAACC,GAAR,CAAYU,MAAM,CAAC6C,GAAP,CAAW1E,GAAX,CAAe,UAAAf,EAAE;AAAA,iBAAIsF,QAAQ,CAACjG,WAAW,CAACoE,MAAb,EAAqBnC,QAArB,EAA+B;AAC7EtB,YAAAA,EAAE,EAAFA;AAD6E,WAA/B,CAAZ;AAAA,SAAjB,CAAZ,EAEFmC,IAFE,CAEG,UAAAuD,SAAS;AAAA,iBAAK;AACtBnE,YAAAA,IAAI,EAAE;AADgB,WAAL;AAAA,SAFZ,CAAP;;AAMF;AACE,eAAOmB,sCAAsC,CAACC,IAAD,EAAOrB,QAAP,EAAiBsB,MAAjB,CAAtC,CAA+DT,IAA/D,CAAoE;AAAA,cACzEqB,GADyE,SACzEA,GADyE;AAAA,cAEzEF,OAFyE,SAEzEA,OAFyE;AAAA,iBAGrEpC,UAAU,CAACsC,GAAD,EAAMF,OAAN,CAH2D;AAAA,SAApE,EAGyBnB,IAHzB,CAG8B,UAAAgD,QAAQ;AAAA,iBAAID,wCAAwC,CAACvC,IAAD,EAAOrB,QAAP,EAAiB6D,QAAjB,CAA5C;AAAA,SAHtC,CAAP;AAjCJ;AAsCD,GAxCD;;AA0CA,SAAOG,QAAP;AACD,CAtSD;;AAwSArG,OAAO,CAACE,OAAR,GAAkB6B,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.transformJsonLdDocumentToReactAdminDocument = void 0;\n\nvar _reactAdmin = require(\"react-admin\");\n\nvar _lodash = _interopRequireDefault(require(\"lodash.isplainobject\"));\n\nvar _fetchHydra = _interopRequireDefault(require(\"./fetchHydra\"));\n\nvar _parseHydraDocumentation = _interopRequireDefault(require(\"@api-platform/api-doc-parser/lib/hydra/parseHydraDocumentation\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nclass ReactAdminDocument {\n  constructor(obj) {\n    Object.assign(this, obj, {\n      originId: obj.id,\n      id: obj['@id']\n    });\n  }\n  /**\n   * @return {string}\n   */\n\n\n  toString() {\n    return `[object ${this.id}]`;\n  }\n\n}\n/**\n * Local cache containing embedded documents.\n * It will be used to prevent useless extra HTTP query if the relation is displayed.\n *\n * @type {Map}\n */\n\n\nconst reactAdminDocumentsCache = new Map();\n/**\n * Transforms a JSON-LD document to a react-admin compatible document.\n *\n * @param {Object} document\n * @param {bool} clone\n *\n * @return {ReactAdminDocument}\n */\n\nconst transformJsonLdDocumentToReactAdminDocument = (document, clone = true, addToCache = true) => {\n  if (clone) {\n    // deep clone documents\n    document = JSON.parse(JSON.stringify(document));\n  } // The main document is a JSON-LD document, convert it and store it in the cache\n\n\n  if (document['@id']) {\n    document = new ReactAdminDocument(document);\n  } // Replace embedded objects by their IRIs, and store the object itself in the cache to reuse without issuing new HTTP requests.\n\n\n  Object.keys(document).forEach(key => {\n    // to-one\n    if ((0, _lodash.default)(document[key]) && document[key]['@id']) {\n      if (addToCache) {\n        reactAdminDocumentsCache[document[key]['@id']] = transformJsonLdDocumentToReactAdminDocument(document[key], false, false);\n      }\n\n      document[key] = document[key]['@id'];\n      return;\n    } // to-many\n\n\n    if (Array.isArray(document[key]) && document[key].length && (0, _lodash.default)(document[key][0]) && document[key][0]['@id']) {\n      document[key] = document[key].map(obj => {\n        if (addToCache) {\n          reactAdminDocumentsCache[obj['@id']] = transformJsonLdDocumentToReactAdminDocument(obj, false, false);\n        }\n\n        return obj['@id'];\n      });\n    }\n  });\n  return document;\n};\n/**\n * Maps react-admin queries to a Hydra powered REST API\n *\n * @see http://www.hydra-cg.com/\n *\n * @example\n * CREATE   => POST http://my.api.url/posts/123\n * DELETE   => DELETE http://my.api.url/posts/123\n * GET_LIST => GET http://my.api.url/posts\n * GET_MANY => GET http://my.api.url/posts/123, GET http://my.api.url/posts/456, GET http://my.api.url/posts/789\n * GET_ONE  => GET http://my.api.url/posts/123\n * UPDATE   => PUT http://my.api.url/posts/123\n */\n\n\nexports.transformJsonLdDocumentToReactAdminDocument = transformJsonLdDocumentToReactAdminDocument;\n\nvar _default = (entrypoint, httpClient = _fetchHydra.default, apiDocumentationParser = _parseHydraDocumentation.default) => {\n  let apiSchema;\n  /**\n   * @param {Object} resource\n   * @param {Object} data\n   *\n   * @returns {Promise}\n   */\n\n  const convertReactAdminDataToHydraData = (resource, data = {}) => {\n    const fieldData = [];\n    resource.fields.forEach(({\n      name,\n      reference,\n      normalizeData\n    }) => {\n      if (!(name in data)) {\n        return;\n      }\n\n      if (reference && data[name] === '') {\n        data[name] = null;\n        return;\n      }\n\n      if (undefined === normalizeData) {\n        return;\n      }\n\n      fieldData[name] = normalizeData(data[name]);\n    });\n    const fieldDataKeys = Object.keys(fieldData);\n    const fieldDataValues = Object.values(fieldData);\n    return Promise.all(fieldDataValues).then(fieldData => {\n      const object = {};\n\n      for (let i = 0; i < fieldDataKeys.length; i++) {\n        object[fieldDataKeys[i]] = fieldData[i];\n      }\n\n      return { ...data,\n        ...object\n      };\n    });\n  };\n  /**\n   * @param {Object} resource\n   * @param {Object} data\n   *\n   * @returns {Promise}\n   */\n\n\n  const transformReactAdminDataToRequestBody = (resource, data = {}) => {\n    resource = apiSchema.resources.find(({\n      name\n    }) => resource === name);\n\n    if (undefined === resource) {\n      return Promise.resolve(data);\n    }\n\n    return convertReactAdminDataToHydraData(resource, data).then(data => JSON.stringify(data));\n  };\n  /**\n   * @param {string} type\n   * @param {string} resource\n   * @param {Object} params\n   *\n   * @returns {Object}\n   */\n\n\n  const convertReactAdminRequestToHydraRequest = (type, resource, params) => {\n    const entrypointUrl = new URL(entrypoint, window.location.href);\n    const collectionUrl = new URL(`${entrypoint}/${resource}`, entrypointUrl);\n    const itemUrl = new URL(params.id, entrypointUrl);\n\n    switch (type) {\n      case _reactAdmin.CREATE:\n        return transformReactAdminDataToRequestBody(resource, params.data).then(body => ({\n          options: {\n            body,\n            method: 'POST'\n          },\n          url: collectionUrl\n        }));\n\n      case _reactAdmin.DELETE:\n        return Promise.resolve({\n          options: {\n            method: 'DELETE'\n          },\n          url: itemUrl\n        });\n\n      case _reactAdmin.GET_LIST:\n      case _reactAdmin.GET_MANY_REFERENCE:\n        {\n          const {\n            pagination: {\n              page,\n              perPage\n            },\n            sort: {\n              field,\n              order\n            }\n          } = params;\n          if (order) collectionUrl.searchParams.set(`order[${field}]`, order);\n          if (page) collectionUrl.searchParams.set('page', page);\n          if (perPage) collectionUrl.searchParams.set('perPage', perPage);\n\n          if (params.filter) {\n            const buildFilterParams = (key, nestedFilter, rootKey) => {\n              const filterValue = nestedFilter[key];\n\n              if (Array.isArray(filterValue)) {\n                filterValue.forEach((arrayFilterValue, index) => {\n                  collectionUrl.searchParams.set(`${rootKey}[${index}]`, arrayFilterValue);\n                });\n                return;\n              }\n\n              if (!(0, _lodash.default)(filterValue)) {\n                collectionUrl.searchParams.set(rootKey, filterValue);\n                return;\n              }\n\n              Object.keys(filterValue).forEach(subKey => {\n                buildFilterParams(subKey, filterValue, `${rootKey}.${subKey}`);\n              });\n            };\n\n            Object.keys(params.filter).forEach(key => {\n              buildFilterParams(key, params.filter, key);\n            });\n          }\n\n          if (type === _reactAdmin.GET_MANY_REFERENCE && params.target) {\n            collectionUrl.searchParams.set(params.target, params.id);\n          }\n\n          return Promise.resolve({\n            options: {},\n            url: collectionUrl\n          });\n        }\n\n      case _reactAdmin.GET_ONE:\n        return Promise.resolve({\n          options: {},\n          url: itemUrl\n        });\n\n      case _reactAdmin.UPDATE:\n        return transformReactAdminDataToRequestBody(resource, params.data).then(body => ({\n          options: {\n            body,\n            method: 'PUT'\n          },\n          url: itemUrl\n        }));\n\n      default:\n        throw new Error(`Unsupported fetch action type ${type}`);\n    }\n  };\n  /**\n   * @param {string} resource\n   * @param {Object} data\n   *\n   * @returns {Promise}\n   */\n\n\n  const convertHydraDataToReactAdminData = (resource, data = {}) => {\n    resource = apiSchema.resources.find(({\n      name\n    }) => resource === name);\n\n    if (undefined === resource) {\n      return Promise.resolve(data);\n    }\n\n    const fieldData = {};\n    resource.fields.forEach(({\n      name,\n      denormalizeData\n    }) => {\n      if (!(name in data) || undefined === denormalizeData) {\n        return;\n      }\n\n      fieldData[name] = denormalizeData(data[name]);\n    });\n    const fieldDataKeys = Object.keys(fieldData);\n    const fieldDataValues = Object.values(fieldData);\n    return Promise.all(fieldDataValues).then(fieldData => {\n      const object = {};\n\n      for (let i = 0; i < fieldDataKeys.length; i++) {\n        object[fieldDataKeys[i]] = fieldData[i];\n      }\n\n      return { ...data,\n        ...object\n      };\n    });\n  };\n  /**\n   * @param {Object} response\n   * @param {string} resource\n   * @param {string} type\n   *\n   * @returns {Promise}\n   */\n\n\n  const convertHydraResponseToReactAdminResponse = (type, resource, response) => {\n    switch (type) {\n      case _reactAdmin.GET_LIST:\n      case _reactAdmin.GET_MANY_REFERENCE:\n        // TODO: support other prefixes than \"hydra:\"\n        return Promise.resolve(response.json['hydra:member'].map(transformJsonLdDocumentToReactAdminDocument)).then(data => Promise.all(data.map(data => convertHydraDataToReactAdminData(resource, data)))).then(data => ({\n          data,\n          total: response.json['hydra:totalItems']\n        }));\n\n      case _reactAdmin.DELETE:\n        return Promise.resolve({\n          data: {\n            id: null\n          }\n        });\n\n      default:\n        return Promise.resolve(transformJsonLdDocumentToReactAdminDocument(response.json)).then(data => convertHydraDataToReactAdminData(resource, data)).then(data => ({\n          data\n        }));\n    }\n  };\n  /**\n   * @param {string} type\n   * @param {string} resource\n   * @param {Object} params\n   *\n   * @returns {Promise}\n   */\n\n\n  const fetchApi = (type, resource, params) => {\n    // Hydra doesn't handle MANY requests, so we fallback to calling the ONE request n times instead\n    switch (type) {\n      case 'INTROSPECT':\n        if (apiSchema) return Promise.resolve({\n          data: apiSchema\n        });\n        return apiDocumentationParser(entrypoint).then(({\n          api\n        }) => {\n          apiSchema = api;\n          return {\n            data: api\n          };\n        });\n\n      case _reactAdmin.GET_MANY:\n        return Promise.all(params.ids.map(id => reactAdminDocumentsCache[id] ? Promise.resolve({\n          data: reactAdminDocumentsCache[id]\n        }) : fetchApi(_reactAdmin.GET_ONE, resource, {\n          id\n        }))).then(responses => ({\n          data: responses.map(({\n            data\n          }) => data)\n        }));\n\n      case _reactAdmin.DELETE_MANY:\n        return Promise.all(params.ids.map(id => fetchApi(_reactAdmin.DELETE, resource, {\n          id\n        }))).then(responses => ({\n          data: []\n        }));\n\n      default:\n        return convertReactAdminRequestToHydraRequest(type, resource, params).then(({\n          url,\n          options\n        }) => httpClient(url, options)).then(response => convertHydraResponseToReactAdminResponse(type, resource, response));\n    }\n  };\n\n  return fetchApi;\n};\n\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}