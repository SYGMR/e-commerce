"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ListGuesserComponent = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactAdmin = require("react-admin");

var _docsUtils = require("./docsUtils");

var _FieldGuesser = _interopRequireDefault(require("./FieldGuesser"));

var _FilterGuesser = _interopRequireDefault(require("./FilterGuesser"));

var _IntrospectQuery = _interopRequireDefault(require("./IntrospectQuery"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const displayOverrideCode = (resourceSchema, fields) => {
  let code = 'If you want to override at least one field, paste this content in the <ListGuesser> component of your resource:\n\n';
  code += `const ${resourceSchema.title}List = props => (\n`;
  code += `    <ListGuesser {...props}>\n`;
  fields.forEach(field => {
    code += `        <FieldGuesser source={"${field.name}"} />\n`;
  });
  code += `    </ListGuesser>\n`;
  code += `);\n`;
  code += `\n`;
  code += `And don't forget update your <ResourceGuesser> component:\n`;
  code += `<ResourceGuesser name={"${resourceSchema.name}"} list={${resourceSchema.title}List} />`;
  console.info(code);
};

class ListGuesserComponent extends _react.default.Component {
  constructor(props) {
    super(props);
    this.state = {
      orderParameters: this.props.resourceSchema ? (0, _docsUtils.getOrderParametersFromResourceSchema)(this.props.resourceSchema) : []
    };
  }

  componentDidMount() {
    if (this.state.orderParameters.length) {
      return;
    }

    this.props.resourceSchema.getParameters().then(() => {
      this.setState({
        orderParameters: (0, _docsUtils.getOrderParametersFromResourceSchema)(this.props.resourceSchema)
      });
    });
  }

  render() {
    const {
      resourceSchema,
      fields,
      ...props
    } = this.props;

    if (!props.children) {
      props.children = fields.map(field => _react.default.createElement(_FieldGuesser.default, {
        key: field.name,
        source: field.name,
        sortable: this.state.orderParameters.includes(field.name)
      }));
      displayOverrideCode(resourceSchema, fields);
    }

    return _react.default.createElement(_reactAdmin.List, props, _react.default.createElement(_reactAdmin.Datagrid, null, props.children, props.hasShow && _react.default.createElement(_reactAdmin.ShowButton, null), props.hasEdit && _react.default.createElement(_reactAdmin.EditButton, null)));
  }

}

exports.ListGuesserComponent = ListGuesserComponent;

const ListGuesser = props => _react.default.createElement(_IntrospectQuery.default, _extends({
  component: ListGuesserComponent
}, props));

ListGuesser.propTypes = {
  children: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
  resource: _propTypes.default.string.isRequired,
  filters: _propTypes.default.element
};
ListGuesser.defaultProps = {
  filters: _react.default.createElement(_FilterGuesser.default, null)
};
var _default = ListGuesser;
exports.default = _default;