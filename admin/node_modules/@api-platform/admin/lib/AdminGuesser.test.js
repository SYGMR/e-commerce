"use strict";

var _react = _interopRequireDefault(require("react"));

var _shallow = _interopRequireDefault(require("react-test-renderer/shallow"));

var _redux = require("redux");

var _reactRedux = require("react-redux");

var _AdminGuesser = require("./AdminGuesser");

var _fixtures__ = require("./__fixtures__");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('<AdminGuesser />', () => {
  const renderer = new _shallow.default();
  const store = (0, _redux.createStore)((state = {}) => state);
  test('renders errors', () => {
    const tree = renderer.render(_react.default.createElement(_reactRedux.Provider, {
      store: store
    }, (0, _AdminGuesser.AdminGuesserComponent)({}, {
      error: 'Failed to fetch documentation',
      data: {
        resources: _fixtures__.resources
      },
      loading: false
    })));
    expect(tree).toMatchSnapshot();
  });
  test('renders loading', () => {
    const tree = renderer.render(_react.default.createElement(_reactRedux.Provider, {
      store: store
    }, (0, _AdminGuesser.AdminGuesserComponent)({}, {
      loading: true
    })));
    expect(tree).toMatchSnapshot();
  });
  test('renders without custom resources', () => {
    const tree = renderer.render(_react.default.createElement(_reactRedux.Provider, {
      store: store
    }, (0, _AdminGuesser.AdminGuesserComponent)({}, {
      data: {
        resources: _fixtures__.resources
      },
      loading: false
    })));
    expect(tree).toMatchSnapshot();
  });
  test('renders without data', () => {
    const tree = renderer.render(_react.default.createElement(_reactRedux.Provider, {
      store: store
    }, (0, _AdminGuesser.AdminGuesserComponent)({}, {
      loading: false
    })));
    expect(tree).toMatchSnapshot();
  });
  test('renders errors without data', () => {
    const tree = renderer.render(_react.default.createElement(_reactRedux.Provider, {
      store: store
    }, (0, _AdminGuesser.AdminGuesserComponent)({}, {
      error: 'Failed to fetch documentation',
      loading: false
    })));
    expect(tree).toMatchSnapshot();
  });
});