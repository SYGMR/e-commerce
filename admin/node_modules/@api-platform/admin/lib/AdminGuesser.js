"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.AdminGuesserComponent = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactAdmin = require("react-admin");

var _styles = require("@material-ui/core/styles");

var _layout = require("./layout");

var _ResourceGuesser = _interopRequireDefault(require("./ResourceGuesser"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const displayOverrideCode = resources => {
  let code = 'If you want to override at least one resource, paste this content in the <HydraAdmin> component of your app:\n\n';
  resources.forEach(r => {
    code += `<ResourceGuesser name={"${r.name}"} />\n`;
  });
  console.info(code);
};
/**
 * AdminGuesserComponent automatically renders an `<Admin>` component for resources exposed by a web API documented with Hydra, OpenAPI or any other format supported by `@api-platform/api-doc-parser`.
 * If child components are passed (usually `<ResourceGuesser>` or `<Resource>` components, but it can be any other React component), they are rendered in the given order.
 * If no children are passed, a `<ResourceGuesser>` component created for each resource type exposed by the API, in the order they are specified in the API documentation.
 */


const AdminGuesserComponent = ({
  children,
  includeDeprecated,
  ...props
}, {
  data,
  error,
  loading
}) => {
  if (loading) {
    return _react.default.createElement(_reactAdmin.TranslationProvider, null, _react.default.createElement(_reactAdmin.Loading, null));
  }

  if (error && data) {
    if ('production' === process.env.NODE_ENV) {
      console.error(error);
    }

    return _react.default.createElement("div", null, "Error while reading the API schema");
  }

  if (!children && data) {
    const resources = includeDeprecated ? data.resources : data.resources.filter(r => !r.deprecated);
    children = resources.map(r => _react.default.createElement(_ResourceGuesser.default, {
      name: r.name,
      key: r.name
    }));
    displayOverrideCode(resources);
  }

  return _react.default.createElement(_reactAdmin.Admin, props, children);
};

exports.AdminGuesserComponent = AdminGuesserComponent;

const AdminGuesser = props => _react.default.createElement(_reactAdmin.Query, {
  type: 'INTROSPECT'
}, state => AdminGuesserComponent(props, state));

AdminGuesser.defaultProps = {
  includeDeprecated: false,
  theme: (0, _styles.createMuiTheme)({
    palette: {
      primary: {
        contrastText: '#ffffff',
        main: '#38a9b4'
      },
      secondary: {
        main: '#288690'
      }
    }
  }),
  appLayout: _layout.Layout
};
AdminGuesser.propTypes = {
  children: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
  theme: _propTypes.default.object,
  includeDeprecated: _propTypes.default.bool
};
var _default = AdminGuesser;
exports.default = _default;